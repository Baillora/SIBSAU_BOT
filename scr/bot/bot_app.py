import sys
import os
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
)
from scr.core.settings import TOKEN
from scr.bot.handlers import start, schedule, teachers, admin, misc
from scr.parsers.schedule_parser import fetch_schedule
from scr.parsers.teacher_parser import fetch_teachers
from scr.core.logger import logger


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, —á—Ç–æ–±—ã Flask –º–æ–≥ –∫ –Ω–µ–π –æ–±—Ä–∞—â–∞—Ç—å—Å—è
bot_app = None

async def preload_data(application):
    """–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    try:
        await fetch_schedule(application)
        logger.info("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –∫—ç—à –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")

    try:
        await fetch_teachers(application)
        logger.info("‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –∫—ç—à –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {e}")


def run_bot():
    global bot_app

    if not TOKEN:
        logger.critical("‚ùå TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env (–∫–ª—é—á –¥–æ–ª–∂–µ–Ω –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è TOKEN)")
        sys.exit(1)

    # —Å–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —É–∫–∞–∑—ã–≤–∞–µ–º preload_data –≤ post_init
    try:
        bot_app = (
            ApplicationBuilder()
            .token(TOKEN)
            .post_init(preload_data)
            .build()
        )
        logger.info(f"‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Ç–æ–∫–µ–Ω: {TOKEN[:8]}...)")
    except Exception as e:
        logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        sys.exit(1)

    print(f"‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–º: {TOKEN[:10]}...")

    # --- –ö–æ–º–∞–Ω–¥—ã ---
    bot_app.add_handler(CommandHandler("start", start.start))
    bot_app.add_handler(CommandHandler("help", misc.help_command))
    bot_app.add_handler(CommandHandler("search", misc.search_command))
    bot_app.add_handler(CommandHandler("plan", misc.plan_command))
    bot_app.add_handler(CommandHandler("map", misc.map_command))

    # –ê–¥–º–∏–Ω–∫–∞
    bot_app.add_handler(CommandHandler("adduser", admin.adduser))
    bot_app.add_handler(CommandHandler("removeuser", admin.removeuser))
    bot_app.add_handler(CommandHandler("listusers", admin.listusers_handler))
    bot_app.add_handler(CommandHandler("reload", admin.reload_command))
    bot_app.add_handler(CommandHandler("fullreload", admin.fullreload))
    bot_app.add_handler(CommandHandler("showlog", admin.showlog))
    bot_app.add_handler(CommandHandler("stats", admin.stats_command))
    bot_app.add_handler(CommandHandler("mod", admin.mod_command))
    bot_app.add_handler(CommandHandler("unmod", admin.unmod_command))
    bot_app.add_handler(CommandHandler("adm", admin.adm_command))
    bot_app.add_handler(CommandHandler("unadm", admin.unadm_command))
    bot_app.add_handler(CommandHandler("broadcast", admin.broadcast))
    bot_app.add_handler(CommandHandler("restart", admin.restart))

    # --- Callback-—Ö—ç–Ω–¥–ª–µ—Ä—ã ---
    bot_app.add_handler(CallbackQueryHandler(schedule.day_handler, pattern=r"^week_[12]_.+"))
    bot_app.add_handler(CallbackQueryHandler(schedule.week_handler, pattern=r"^week_[12]$"))
    bot_app.add_handler(CallbackQueryHandler(schedule.today_handler, pattern="^today$"))
    bot_app.add_handler(CallbackQueryHandler(schedule.tomorrow_handler, pattern="^tomorrow$"))
    bot_app.add_handler(CallbackQueryHandler(schedule.session_handler, pattern="^session$"))

    # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏
    bot_app.add_handler(CallbackQueryHandler(teachers.teacher_day_all_handler, pattern=r"^teacher_day_all_[0-9]+$"))
    bot_app.add_handler(CallbackQueryHandler(teachers.teacher_pairs_handler, pattern=r"^teacher_pairs_[0-9]+$"))
    bot_app.add_handler(CallbackQueryHandler(teachers.teacher_consult_handler, pattern=r"^teacher_consult_[0-9]+$"))
    bot_app.add_handler(CallbackQueryHandler(teachers.teacher_handler, pattern=r"^teacher_[0-9]+$"))
    bot_app.add_handler(CallbackQueryHandler(teachers.teacher_day_handler, pattern=r"^teacher_day_[0-9]+_.+"))
    bot_app.add_handler(CallbackQueryHandler(teachers.teachers_list_handler, pattern="^teachers_list$"))

    # –í–æ–∑–≤—Ä–∞—Ç—ã –Ω–∞–∑–∞–¥
    bot_app.add_handler(CallbackQueryHandler(start.back_to_week_handler, pattern="^back_to_week$"))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—ã...")
    
    try:
        bot_app.run_polling()
        logger.info("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã callback-—Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è: week, day, today, tomorrow, session")
    except (KeyboardInterrupt, SystemExit) as e:
        logger.info(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –í–°–ï–ì–î–ê
    if os.path.exists('.restart_flag'):
        try:
            with open('.restart_flag', 'r') as f:
                code = int(f.read().strip())
            os.remove('.restart_flag')
            logger.info(f"‚ôªÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–ª–∞–≥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å –∫–æ–¥–æ–º {code}")
            sys.exit(code)
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–ª–∞–≥–∞: {e}")
            if os.path.exists('.restart_flag'):
                os.remove('.restart_flag')