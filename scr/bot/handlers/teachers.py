from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from scr.parsers.teacher_parser import (
    fetch_teachers,
    fetch_consultations_for_teacher,
    fetch_pairs_for_teacher,
    teachers_cache,
)
from scr.core.users import UserManager, is_user_allowed
from scr.core.settings import OWNER_ID, RU_WEEKDAYS_ORDER
from scr.core.logger import logger

from .utils import safe_edit_message

users = UserManager(owner_id=OWNER_ID)

def ensure_teacher_cache(teacher_id: str):
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤ –∫—ç—à–µ –µ—Å—Ç—å –¥–∞–∂–µ –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞"""
    if teacher_id not in teachers_cache:
        teachers_cache[teacher_id] = {
            "name": None,
            "pairs": {},
            "consultations": [],
        }
    return teachers_cache[teacher_id]


async def teachers_list_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    uid = query.from_user.id
    username = query.from_user.username or query.from_user.full_name

    if not is_user_allowed(uid):
        await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        await query.edit_message_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        logger.warning(f"‚ùå {username} ({uid}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞.")
        return

    await query.answer()

    if not users.is_allowed(update.effective_user.id):
        await safe_edit_message(query, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    await fetch_teachers(context.application)

    keyboard = []
    for tid, t in teachers_cache.items():
        display_name = t.get("name") or f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å {tid}"
        keyboard.append([InlineKeyboardButton(display_name, callback_data=f"teacher_{tid}")])

    keyboard.append([InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_week")])

    await safe_edit_message(query, "–°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:", InlineKeyboardMarkup(keyboard))
    logger.info(f"‚úÖ {username} ({uid}) –æ—Ç–∫—Ä—ã–ª —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.")


async def teacher_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    uid = query.from_user.id
    username = query.from_user.username or query.from_user.full_name

    if not is_user_allowed(uid):
        await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        logger.warning(f"‚ùå {username} ({uid}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞.")
        return

    await query.answer()
    try:
        _, teacher_id = query.data.split("_", 1)
    except ValueError:
        await safe_edit_message(query, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
        logger.warning(f"‚ùå {username} ({uid}) –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback: {query.data}")
        return

    teacher = ensure_teacher_cache(teacher_id)
    if not teacher.get("name"):
        await fetch_teachers(context.application)
        teacher = teachers_cache.get(teacher_id, teacher)

    if not teacher.get("name"):
        await safe_edit_message(query, "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        logger.warning(f"‚ùå {username} ({uid}) –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {teacher_id}")
        return

    keyboard = [
        [
            InlineKeyboardButton("–ü–∞—Ä—ã", callback_data=f"teacher_pairs_{teacher_id}"),
            InlineKeyboardButton("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", callback_data=f"teacher_consult_{teacher_id}"),
        ],
        [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="teachers_list")],
    ]

    await safe_edit_message(query, f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher['name']}", InlineKeyboardMarkup(keyboard))
    logger.info(f"‚úÖ {username} ({uid}) –æ—Ç–∫—Ä—ã–ª –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {teacher['name']} (ID: {teacher_id}).")


async def teacher_pairs_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    uid = query.from_user.id
    username = query.from_user.username or query.from_user.full_name

    if not is_user_allowed(uid):
        await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        logger.warning(f"‚ùå {username} ({uid}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–∫—Ä—ã—Ç—å –ø–∞—Ä—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞.")
        return

    await query.answer()
    # –æ–∂–∏–¥–∞–µ–º callback "teacher_pairs_{teacher_id}"
    try:
        _, _, teacher_id = query.data.split("_", 2)
    except ValueError:
        await safe_edit_message(query, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π callback.")
        logger.warning(f"‚ùå {username} ({uid}) –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback: {query.data}")
        return

    # –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –≤ –∫—ç—à–µ
    if teacher_id not in teachers_cache:
        await fetch_teachers(context.application)
    teacher = teachers_cache.get(teacher_id)
    if not teacher:
        await safe_edit_message(query, "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        logger.warning(f"‚ùå {username} ({uid}) –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {teacher_id}")
        return

    # –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä—ã (–ø–∞—Ä—Å–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É {day: {"1": [], "2": []}})
    pairs = await fetch_pairs_for_teacher(teacher_id)
    teacher["pairs"] = pairs  # –æ–±–Ω–æ–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–∏ –∫—ç—à–∞

    # –ö–Ω–æ–ø–∫–∏ ‚Äî –¥–Ω–∏ + –í—Å–µ –¥–Ω–∏
    keyboard = [[InlineKeyboardButton(day, callback_data=f"teacher_day_{teacher_id}_{day}")] for day in RU_WEEKDAYS_ORDER]
    # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç callback –∫–∞–∫ teacher_day_{teacher_id}_all ‚Äî handler —É–º–µ–µ—Ç –µ–≥–æ —Ä–∞–∑–±–∏—Ä–∞—Ç—å
    keyboard.append([InlineKeyboardButton("–í—Å–µ –¥–Ω–∏", callback_data=f"teacher_day_{teacher_id}_all")])
    keyboard.append([InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"teacher_{teacher_id}")])

    await safe_edit_message(query, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —É {teacher['name']}", InlineKeyboardMarkup(keyboard))
    logger.info(f"‚úÖ {username} ({uid}) –∑–∞–ø—Ä–æ—Å–∏–ª –ø–∞—Ä—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {teacher['name']} (ID: {teacher_id}).")


async def teacher_day_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
      - teacher_day_{teacher_id}_{day}
      - teacher_day_{teacher_id}_all
      - teacher_day_all_{teacher_id}
    """
    query = update.callback_query
    uid = query.from_user.id
    username = query.from_user.username or query.from_user.full_name

    if not is_user_allowed(uid):
        await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        logger.warning(f"‚ùå {username} ({uid}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞.")
        return

    await query.answer()
    parts = query.data.split("_")
    # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ "teacher_day_x_y" -> >=4
    if len(parts) < 4 or parts[0] != "teacher" or parts[1] != "day":
        await safe_edit_message(query, "–ù–µ–≤–µ—Ä–Ω—ã–π callback.")
        logger.warning(f"‚ùå {username} ({uid}) –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback: {query.data}")
        return

    # –§–æ—Ä–º–∞—Ç—ã
    # teacher_day_{teacher_id}_{day}
    # teacher_day_{teacher_id}_all
    # teacher_day_all_{teacher_id}

    if parts[2] == "all" and len(parts) >= 4:
        #teacher_day_all_{teacher_id}
        teacher_id = parts[3]
        requested = "all"
    elif parts[-1] == "all":
        #teacher_day_{teacher_id}_all
        teacher_id = parts[2]
        requested = "all"
    else:
        teacher_id = parts[2]
        requested = "_".join(parts[3:])  # –∏–º—è –¥–Ω—è

    teacher = ensure_teacher_cache(teacher_id)
    pairs = teacher.get("pairs", {})

    text = ""
    if requested == "all":
        for d in RU_WEEKDAYS_ORDER:
            text += format_day_schedule(d, pairs.get(d, {"1": [], "2": []}))
    else:
        text = format_day_schedule(requested, pairs.get(requested, {"1": [], "2": []}))

    await safe_edit_message(
        query,
        text or "–ù–µ—Ç –ø–∞—Ä.",
        InlineKeyboardMarkup([[InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"teacher_pairs_{teacher_id}")]])
    )
    logger.info(f"‚úÖ {username} ({uid}) –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_id} –Ω–∞ {requested}.")


def format_day_schedule(day_name: str, pairs_by_week: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ —Å—Ç–∏–ª–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
    text = f"üîπ {day_name}:\n\n"

    def format_lessons(lessons):
        out = ""
        # —Å–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–µ—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –æ–¥–Ω–æ –≤—Ä–µ–º—è => –ø–æ–¥–≥—Ä—É–ø–ø—ã)
        grouped = {}
        order = []
        for l in lessons:
            t = l.get("time", "")
            if t not in grouped:
                grouped[t] = []
                order.append(t)
            grouped[t].append(l)

        for t in order:
            out += f"‚è∞ {t}\n"
            for entry in grouped[t]:
                subgroup = entry.get("subgroup")
                # info ‚Äî —É–∂–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω –≤ –ø–∞—Ä—Å–µ—Ä–µ (subject + –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏)
                info_lines = [ln for ln in (entry.get("info") or "").split("\n") if ln.strip()]
                subject = info_lines[0] if info_lines else ""
                rest = "\n".join(info_lines[1:]) if len(info_lines) > 1 else ""

                if subgroup:
                    # –¥–µ–ª–∞–µ–º –∑–∞–º–µ–Ω—É 1 –ø–æ–¥–≥—Ä—É–ø–ø–∞ -> 1Ô∏è‚É£ –ø–æ–¥–≥—Ä—É–ø–ø–∞ –≤ –ø–∞—Ä—Å–µ—Ä–µ
                    subgroup = subgroup.replace("1 –ø–æ–¥–≥—Ä—É–ø–ø–∞", "1Ô∏è‚É£ –ø–æ–¥–≥—Ä—É–ø–ø–∞").replace("2 –ø–æ–¥–≥—Ä—É–ø–ø–∞", "2Ô∏è‚É£ –ø–æ–¥–≥—Ä—É–ø–ø–∞")
                    out += f"üî∏ {subgroup}\n"

                if subject:
                    out += f"üìö *{subject}\n"
                if rest:
                    out += rest + "\n"

                out += "\n"
        return out

    if pairs_by_week.get("1"):
        text += "üìÖ –ü–µ—Ä–≤–∞—è –Ω–µ–¥–µ–ª—è\n\n" + format_lessons(pairs_by_week["1"])
    if pairs_by_week.get("2"):
        text += "üìÖ –í—Ç–æ—Ä–∞—è –Ω–µ–¥–µ–ª—è\n\n" + format_lessons(pairs_by_week["2"])
    if not pairs_by_week.get("1") and not pairs_by_week.get("2"):
        text += "–ù–µ—Ç –ø–∞—Ä.\n"

    return text + "\n"


async def teacher_day_all_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –î–æ–ø. –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä
    —Å –¥—Ä—É–≥–∏–º —Ñ–æ—Ä–º–∞—Ç–æ–º callback
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã:
      - teacher_day_all_{teacher_id}
      - teacher_day_{teacher_id}_all
    """
    query = update.callback_query
    uid = query.from_user.id
    username = query.from_user.username or query.from_user.full_name

    if not is_user_allowed(uid):
        await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        logger.warning(f"‚ùå {username} ({uid}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–∫—Ä—ã—Ç—å –≤—Å–µ –ø–∞—Ä—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞.")
        return

    await query.answer()
    parts = query.data.split("_")
    teacher_id = None
    if len(parts) >= 4:
        if parts[2] == "all":
            teacher_id = parts[3]
        elif parts[-1] == "all":
            teacher_id = parts[2]
    if not teacher_id:
        await safe_edit_message(query, "–ù–µ–≤–µ—Ä–Ω—ã–π callback.")
        logger.warning(f"‚ùå {username} ({uid}) –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback: {query.data}")
        return

    teacher = ensure_teacher_cache(teacher_id)
    pairs = teacher.get("pairs", {})
    text = f"üìÖ –í—Å–µ –ø–∞—Ä—ã —É {teacher.get('name', teacher_id)}:\n\n"

    for day in RU_WEEKDAYS_ORDER:
        text += format_day_schedule(day, pairs.get(day, {"1": [], "2": []}))

    if not pairs or all((not lessons.get("1") and not lessons.get("2")) for lessons in pairs.values()):
        text += "–ù–µ—Ç –ø–∞—Ä."

    if len(text) > 4000:
        text = text[:3990] + "...\n(–¥–∞–ª—å—à–µ —Å–º. —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É)"

    keyboard = [[InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"teacher_pairs_{teacher_id}")]]
    await safe_edit_message(query, text, InlineKeyboardMarkup(keyboard))
    logger.info(f"‚úÖ {username} ({uid}) –∑–∞–ø—Ä–æ—Å–∏–ª –≤—Å–µ –ø–∞—Ä—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_id}.")


async def teacher_consult_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    uid = query.from_user.id
    username = query.from_user.username or query.from_user.full_name

    if not is_user_allowed(uid):
        await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        logger.warning(f"‚ùå {username} ({uid}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞.")
        return

    await query.answer()
    try:
        _, _, teacher_id = query.data.split("_", 2)
    except ValueError:
        await safe_edit_message(query, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
        logger.warning(f"‚ùå {username} ({uid}) –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback: {query.data}")
        return

    teacher = ensure_teacher_cache(teacher_id)
    if not teacher["consultations"]:
        teacher["consultations"] = await fetch_consultations_for_teacher(teacher_id)

    consults = teacher["consultations"]
    text = f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ {teacher.get('name', teacher_id)}:\n\n"
    if consults:
        for c in consults:
            text += f"{c['date']} ‚è∞ {c['time']}\n{c['info']}\n\n"
    else:
        text += "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π."

    await safe_edit_message(query, text, InlineKeyboardMarkup(
        [[InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"teacher_{teacher_id}")]]
    ))
    logger.info(f"‚úÖ {username} ({uid}) –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {teacher_id}.")
