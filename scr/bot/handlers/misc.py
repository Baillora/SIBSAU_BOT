from telegram import Update
from telegram.ext import ContextTypes
from scr.core.settings import PLAN_URL, OWNER_ID
from scr.core.users import UserManager, get_user_role, is_user_allowed
from scr.core.stats import StatsManager
from scr.core.logger import logger
from scr.parsers.schedule_parser import fetch_schedule
from scr.parsers.teacher_parser import fetch_teachers, teachers_cache

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
users = UserManager(owner_id=OWNER_ID)
stats = StatsManager()


# /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    uid = update.effective_user.id
    username = update.effective_user.username or update.effective_user.full_name

    # –ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä
    public_commands = [
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞",
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
    ]

    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —é–∑–µ—Ä–æ–≤
    user_commands = [
        "/search <–∑–∞–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º",
        "/plan - –ü–æ–∫–∞–∑–∞—Ç—å —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω",
        "/map - –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É –∫–æ—Ä–ø—É—Å–æ–≤"
    ]

    # –ú–æ–¥–µ—Ä/–∞–¥–º–∏–Ω
    mod_admin_commands = [
        "/adduser <user_id> - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        "/removeuser <user_id> - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        "/listusers - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "/reload - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—ç—à —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
        "/fullreload - –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ + –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏)"
    ]

    # –ê–¥–º–∏–Ω
    admin_commands = [
        "/showlog [—á–∏—Å–ª–æ] - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ª–æ–≥–æ–≤",
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
        "/mod <user_id> - –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º",
        "/unmod <user_id> - –°–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞",
        "/broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ> - –†–∞—Å—Å—ã–ª–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"
    ]

    # –í–ª–∞–¥–µ–ª–µ—Ü
    owner_commands = [
        "/adm <user_id> - –ù–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
        "/unadm <user_id> - –°–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        "/restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
    ]

    message_lines = []
    message_lines.extend(public_commands)

    if is_user_allowed(uid):
        role = get_user_role(uid)

        message_lines.append("\n-- –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π --")
        message_lines.extend(user_commands)

        if role in ["mod", "admin", "owner"]:
            message_lines.append("\n-- –î–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤/–∞–¥–º–∏–Ω–æ–≤ --")
            message_lines.extend(mod_admin_commands)

        if role in ["admin", "owner"]:
            message_lines.append("\n-- –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ --")
            message_lines.extend(admin_commands)

        if role == "owner":
            message_lines.append("\n-- –î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ --")
            message_lines.extend(owner_commands)

    await update.message.reply_text("\n".join(message_lines))
    logger.info(f"‚úÖ {username} ({uid}) –≤—ã–∑–≤–∞–ª /help.")

# ---------------- /search ----------------
async def search_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    username = update.effective_user.username or update.effective_user.full_name

    if not is_user_allowed(uid):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        logger.warning(f"‚ùå {username} ({uid}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å /search –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞.")
        return

    query = " ".join(context.args).strip().lower()
    username = update.effective_user.username or update.effective_user.full_name

    stats.add_search_query()
    stats.increment_command(uid)
    stats.save()

    if not query:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search <–∑–∞–ø—Ä–æ—Å>")
        logger.warning(f"‚ùå {username} ({uid}) –≤—ã–∑–≤–∞–ª /search –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")
        return

    application = context.application
    results = []

    # --- –ü–æ–∏—Å–∫ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ ---
    schedule = await fetch_schedule(application)
    if schedule:
        for week_key in ["week_1", "week_2", "session"]:
            if week_key not in schedule:
                continue
            for day, lessons in schedule[week_key].items():
                if day.startswith("_"):
                    continue
                for lesson in lessons:
                    if isinstance(lesson, dict):
                        if query in lesson["info"].lower():
                            results.append({
                                "source": "schedule",
                                "week": week_key,
                                "day": day,
                                "time": lesson["time"],
                                "info": lesson["info"],
                                "subgroup": lesson.get("subgroup"),
                            })

    # --- –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º ---
    await fetch_teachers(application)
    for tid, t in teachers_cache.items():
        if t["name"] and query in t["name"].lower():
            results.append({
                "source": "teacher",
                "id": tid,
                "name": t["name"],
            })

    if not results:
        await update.message.reply_text("–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # --- –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ---
    message = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è '{query}':\n\n"

    for res in results:
        if res["source"] == "schedule":
            # –Ω–µ–¥–µ–ª—è
            if res["week"] == "week_1":
                week_text = "1-–∞—è –Ω–µ–¥–µ–ª—è"
            elif res["week"] == "week_2":
                week_text = "2-–∞—è –Ω–µ–¥–µ–ª—è"
            else:
                week_text = "–°–µ—Å—Å–∏—è"

            # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ –∫–∞–∫ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
            info_lines = [ln for ln in (res["info"] or "").split("\n") if ln.strip()]
            subject = info_lines[0] if info_lines else ""
            rest = "\n".join(info_lines[1:]) if len(info_lines) > 1 else ""

            message += f"{week_text} - {res['day']}\n"
            message += f"‚è∞ {res['time']}\n"
            if res.get("subgroup"):
                message += f"üî∏ {res['subgroup']}\n"
            if subject:
                message += f"üìö *{subject}*\n"
            if rest:
                message += rest + "\n"
            message += "\n"

        elif res["source"] == "teacher":
            message += f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: *{res['name']}*\n\n"

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–µ–ª–µ–≥–∏
    if len(message) > 4096:
        for i in range(0, len(message), 4096):
            await update.message.reply_text(message[i:i+4096], parse_mode="Markdown")
    else:
        await update.message.reply_text(message, parse_mode="Markdown")

    logger.info(f"‚úÖ {username} ({uid}) –≤—ã–ø–æ–ª–Ω–∏–ª –ø–æ–∏—Å–∫: '{query}' -> –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")

# ---------------- /plan ----------------
async def plan_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    username = update.effective_user.username or update.effective_user.full_name

    if not is_user_allowed(uid):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        logger.warning(f"‚ùå {username} ({uid}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å /plan –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞.")
        return

    stats.increment_command(uid)
    stats.save()

    if not PLAN_URL:
        await update.message.reply_text("–£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        logger.error("PLAN_URL –Ω–µ –∑–∞–¥–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        return

    await update.message.reply_text(f"üìë –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω: {PLAN_URL}")
    logger.info(f"‚úÖ {username} ({uid}) –∑–∞–ø—Ä–æ—Å–∏–ª —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω.")


# ---------------- /map ----------------
async def map_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    username = update.effective_user.username or update.effective_user.full_name

    if not is_user_allowed(uid):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        logger.warning(f"‚ùå {username} ({uid}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å /map –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞.")
        return

    stats.increment_command(uid)
    stats.save()

    await update.message.reply_text("üó∫ –ö–∞—Ä—Ç–∞ –∫–æ—Ä–ø—É—Å–æ–≤: https://cloud.sibsau.ru/s/KsYWFjEig2emNwH")
    logger.info(f"‚úÖ {username} ({uid}) –∑–∞–ø—Ä–æ—Å–∏–ª –∫–∞—Ä—Ç—É –∫–æ—Ä–ø—É—Å–æ–≤.")

