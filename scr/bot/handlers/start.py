from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from scr.core.stats import stats, save_stats, increment_user_commands, record_peak_usage, record_daily_active
from scr.core.users import UserManager, get_user_role, is_user_allowed
from scr.parsers.schedule_parser import get_current_week_and_day, fetch_schedule, get_current_and_next_lesson
from scr.core.settings import OWNER_ID
from scr.core.logger import logger

users = UserManager(owner_id=OWNER_ID)


# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    uid = update.effective_user.id
    username = update.effective_user.username or update.effective_user.full_name

    # –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats['unique_users'].add(uid)
    stats['total_messages'] += 1
    increment_user_commands(uid)
    record_peak_usage()
    record_daily_active(uid)
    stats['commands_executed'] += 1
    save_stats()

    if not is_user_allowed(uid):
        logger.warning(f"‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({uid}) –≤—ã–∑–≤–∞–ª /start.")
        try:
            owner_user = await context.bot.get_chat(OWNER_ID)
            owner_username = f"@{owner_user.username}" if owner_user.username else owner_user.full_name
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ: {e}")
            owner_username = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"

        await update.message.reply_text(
            f"–í–∞—à ID: {uid}\n\n"
            f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —Å–æ–æ–±—â–∏—Ç–µ –≤–∞—à ID {owner_username}.\n\n"
            "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ @lssued"
        )
        return

    # –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    role = get_user_role(uid)
    logger.info(f"‚úÖ {username} ({uid}) [{role}] –≤—ã–∑–≤–∞–ª /start.")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–Ω–µ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    date_str, day_name, current_week = get_current_week_and_day()
    schedule = await fetch_schedule(context.application)
    current_lesson, time_until_current_end, next_lesson, time_until_next = get_current_and_next_lesson(
        schedule, current_week, day_name
    )
    # –ö–æ–Ω–µ—Ü –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

    week_text = "1-–∞—è –Ω–µ–¥–µ–ª—è" if current_week == 'week_1' else "2-–∞—è –Ω–µ–¥–µ–ª—è"
    welcome_message = f"‚è±Ô∏è –°–µ–≥–æ–¥–Ω—è: {date_str}, {day_name}, {week_text}.\n\n"

    if current_lesson:
        info_lines = [ln for ln in (current_lesson.get("info") or "").split("\n") if ln.strip()]
        subject = info_lines[0].replace('*', '').strip() if info_lines else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        subgroup = current_lesson.get("subgroup", "")
        classroom = current_lesson.get("classroom", "")
        welcome_message += f"üéì –°–µ–π—á–∞—Å –∏–¥—ë—Ç: *{subject}*\n"
        if time_until_current_end is not None:
            mins = time_until_current_end
            hours, minutes = divmod(mins, 60)
            if hours > 0:
                end_str = f"{hours} —á {minutes} –º–∏–Ω"
            else:
                end_str = f"{minutes} –º–∏–Ω"
            welcome_message += f"‚è≥ –î–æ –∫–æ–Ω—Ü–∞: *{end_str}*\n"
        if subgroup:
            welcome_message += f"üî∏ {subgroup}\n"
        if classroom:
            welcome_message += f"üìç {classroom}\n"
        welcome_message += "\n"

    else:
        welcome_message += "üéì –°–µ–π—á–∞—Å –ø–∞—Ä –Ω–µ—Ç.\n\n"

    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–∞—Ä—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if next_lesson is not None and time_until_next is not None:
        total_minutes = time_until_next
        if total_minutes < 0:
            pass
        elif total_minutes == 0:
            welcome_message += "üîú –°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞ *–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–µ–π—á–∞—Å*!\n\n"
        else:
            hours, minutes = divmod(total_minutes, 60)
            if hours > 0:
                time_str = f"{hours} —á {minutes} –º–∏–Ω"
            else:
                time_str = f"{minutes} –º–∏–Ω"
            info_lines = [ln for ln in (next_lesson.get("info") or "").split("\n") if ln.strip()]
            subject = info_lines[0].replace('*', '').strip() if info_lines else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            subgroup = next_lesson.get("subgroup", "")
            classroom = next_lesson.get("classroom", "")
            welcome_message += f"üîú –°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞ —á–µ—Ä–µ–∑ *{time_str}*:\nüìö *{subject}*\n"
            if subgroup:
                welcome_message += f"üî∏ {subgroup}\n"
            if classroom:
                welcome_message += f"üìç {classroom}\n"
            welcome_message += "\n"
    elif not current_lesson:
        welcome_message += "üîö –°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –ø–∞—Ä –Ω–µ—Ç.\n\n"

    welcome_message += "üíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ @lssued\n\nü§ñ https://github.com/Baillora"

    keyboard = [
        [
            InlineKeyboardButton("1 –Ω–µ–¥–µ–ª—è", callback_data='week_1'),
            InlineKeyboardButton("2 –Ω–µ–¥–µ–ª—è", callback_data='week_2'),
            InlineKeyboardButton("–°–µ—Å—Å–∏—è", callback_data='session')
        ],
        [
            InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data='today'),
            InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data='tomorrow')
        ],
        [
            InlineKeyboardButton("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", callback_data='teachers_list')
        ]
    ]

    await update.message.reply_text(welcome_message, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
async def back_to_week_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    uid = query.from_user.id
    username = query.from_user.username or query.from_user.full_name

    if not is_user_allowed(uid):
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.", show_alert=True)
        logger.warning(f"‚ùå {username} ({uid}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞.")
        return

    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–Ω–µ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    date_str, day_name, current_week = get_current_week_and_day()
    schedule = await fetch_schedule(context.application)
    current_lesson, time_until_current_end, next_lesson, time_until_next = get_current_and_next_lesson(
        schedule, current_week, day_name
    )
    # –ö–æ–Ω–µ—Ü –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

    week_text = "1-–∞—è –Ω–µ–¥–µ–ª—è" if current_week == 'week_1' else "2-–∞—è –Ω–µ–¥–µ–ª—è"
    welcome_message = f"‚è±Ô∏è –°–µ–≥–æ–¥–Ω—è: {date_str}, {day_name}, {week_text}.\n\n"

    if current_lesson:
        info_lines = [ln for ln in (current_lesson.get("info") or "").split("\n") if ln.strip()]
        subject = info_lines[0].replace('*', '').strip() if info_lines else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        subgroup = current_lesson.get("subgroup", "")
        classroom = current_lesson.get("classroom", "")
        welcome_message += f"üéì –°–µ–π—á–∞—Å –∏–¥—ë—Ç: *{subject}*\n"
        if time_until_current_end is not None:
            mins = time_until_current_end
            hours, minutes = divmod(mins, 60)
            if hours > 0:
                end_str = f"{hours} —á {minutes} –º–∏–Ω"
            else:
                end_str = f"{minutes} –º–∏–Ω"
            welcome_message += f"‚è≥ –î–æ –∫–æ–Ω—Ü–∞: *{end_str}*\n"
        if subgroup:
            welcome_message += f"üî∏ {subgroup}\n"
        if classroom:
            welcome_message += f"üìç {classroom}\n"
        welcome_message += "\n"

    else:
        welcome_message += "üéì –°–µ–π—á–∞—Å –ø–∞—Ä –Ω–µ—Ç.\n\n"

    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–∞—Ä—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if next_lesson is not None and time_until_next is not None:
        total_minutes = time_until_next
        if total_minutes < 0:
            pass
        elif total_minutes == 0:
            welcome_message += "üîú –°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞ *–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–µ–π—á–∞—Å*!\n\n"
        else:
            hours, minutes = divmod(total_minutes, 60)
            if hours > 0:
                time_str = f"{hours} —á {minutes} –º–∏–Ω"
            else:
                time_str = f"{minutes} –º–∏–Ω"
            info_lines = [ln for ln in (next_lesson.get("info") or "").split("\n") if ln.strip()]
            subject = info_lines[0].replace('*', '').strip() if info_lines else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            subgroup = next_lesson.get("subgroup", "")
            classroom = next_lesson.get("classroom", "")
            welcome_message += f"üîú –°–ª–µ–¥—É—é—â–∞—è –ø–∞—Ä–∞ —á–µ—Ä–µ–∑ *{time_str}*:\nüìö *{subject}*\n"
            if subgroup:
                welcome_message += f"üî∏ {subgroup}\n"
            if classroom:
                welcome_message += f"üìç {classroom}\n"
            welcome_message += "\n"
    elif not current_lesson:
        welcome_message += "üîö –°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –ø–∞—Ä –Ω–µ—Ç.\n\n"

    welcome_message += "üíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ @lssued\n\nü§ñ https://github.com/Baillora"

    keyboard = [
        [
            InlineKeyboardButton("1 –Ω–µ–¥–µ–ª—è", callback_data='week_1'),
            InlineKeyboardButton("2 –Ω–µ–¥–µ–ª—è", callback_data='week_2'),
            InlineKeyboardButton("–°–µ—Å—Å–∏—è", callback_data='session')
        ],
        [
            InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data='today'),
            InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data='tomorrow')
        ],
        [
            InlineKeyboardButton("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", callback_data='teachers_list')
        ]
    ]

    try:
        await query.edit_message_text(
            text=welcome_message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        logger.info(f"‚úÖ {username} ({uid}) –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ back_to_week: {e}")
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é.")