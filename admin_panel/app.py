import os
import json
import asyncio
import time
import pyotp
import qrcode
import io
from functools import wraps
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
from flask import Flask, render_template, redirect, url_for, request, flash, session, send_file
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from flask_wtf import CSRFProtect
from dotenv import load_dotenv
from .forms import LoginForm, TwoFAForm

# ----- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è -----
load_dotenv()

FLASK_SECRET = os.environ.get("FLASK_SECRET")  # –î–ª—è –ø–æ–¥–ø–∏—Å–∏ cookies
PANEL_USER = os.environ.get("PANEL_USER")      # –î–ª—è –ª–æ–≥–∏–Ω–∞
PANEL_PASS = os.environ.get("PANEL_PASS")      # –î–ª—è –ø–∞—Ä–æ–ª—è

OWNER_ID = os.environ.get("PANEL_OWNER_ID")    # ID –≤–ª–∞–¥–µ–ª—å—Ü–∞

SSL_CERT = os.environ.get("SSL_CERT")          # ssl —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç .crt
SSL_KEY = os.environ.get("SSL_KEY")            # ssl –∫–ª—é—á .key

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
missing = []
if not FLASK_SECRET:
    missing.append("FLASK_SECRET")
if not PANEL_USER:
    missing.append("PANEL_USER")
if not PANEL_PASS:
    missing.append("PANEL_PASS")

if missing:
    raise RuntimeError(
        f"–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing)}. "
        f"–£–∫–∞–∂–∏—Ç–µ –∏—Ö –≤ —Ñ–∞–π–ª–µ .env"
    )

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir))
USERS_FILE = os.path.join(PROJECT_ROOT, "allowed_users.json")
STATS_FILE = os.path.join(PROJECT_ROOT, "stats.json")
LOG_FILE   = os.path.join(PROJECT_ROOT, "warning.log")

# ----- Flask -----
app = Flask(__name__, template_folder="templates", static_folder="static")
app.secret_key = FLASK_SECRET

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–π
app.config.update(
    SESSION_COOKIE_HTTPONLY=True,
    SESSION_COOKIE_SECURE=True,     # cookie —Ç–æ–ª—å–∫–æ –ø–æ HTTPS
    SESSION_COOKIE_SAMESITE="Strict",
    PERMANENT_SESSION_LIFETIME=timedelta(minutes=30)
)

# CSRF –∑–∞—â–∏—Ç–∞
csrf = CSRFProtect(app)

# –û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–æ–≤ (anti-bruteforce)
limiter = Limiter(get_remote_address, app=app, default_limits=["10 per minute"])

# ----- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–æ—Ç–∞ -----
application = None
bot_loop: Optional[asyncio.AbstractEventLoop] = None

@app.before_request
def warn_if_not_https():
    if not request.is_secure:
        flash("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∑–∞—â–∏—â–µ–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS", "danger")

# ================== –£–¢–ò–õ–ò–¢–´ ==================
def login_required(f):
    @wraps(f)
    def _wrap(*args, **kwargs):
        if not session.get("logged_in"):
            return redirect(url_for("login"))
        return f(*args, **kwargs)
    return _wrap

def read_json(path: str, default: Any) -> Any:
    try:
        if os.path.exists(path):
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
    except Exception as e:
        app.logger.warning(f"read_json error for {path}: {e}")
    return default

def write_json(path: str, data: Any) -> None:
    try:
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        app.logger.error(f"write_json error for {path}: {e}")
        raise

def load_users() -> Dict[str, Dict[str, str]]:
    data = read_json(USERS_FILE, {})
    users = {}

    if isinstance(data, dict) and "users" in data:
        raw = data["users"]
        for uid, val in raw.items():
            if isinstance(val, dict):
                users[uid] = {"role": val.get("role", "user"), "username": val.get("username", "")}
            else:
                # —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: uid: role
                users[uid] = {"role": str(val), "username": ""}
    elif isinstance(data, dict):
        # –µ—Å–ª–∏ –≤–µ—Å—å —Ñ–∞–π–ª ‚Äî —ç—Ç–æ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç {id: role}
        for uid, val in data.items():
            users[uid] = {"role": str(val), "username": ""}

    # —Å—Ä–∞–∑—É –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    if users:
        save_users(users)

    return users


def save_users(users: Dict[str, Dict[str, str]]) -> None:
    write_json(USERS_FILE, {"users": users})

def load_stats() -> Dict[str, Any]:
    data = read_json(STATS_FILE, {})
    return data if isinstance(data, dict) else {}

def tail_log(path: str, max_lines: int = 500) -> str:
    if not os.path.exists(path):
        return ""
    try:
        with open(path, "r", encoding="utf-8", errors="replace") as f:
            lines = f.readlines()
        last_lines = lines[-max_lines:]
        return "".join(reversed(last_lines))
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e}"

def schedule_coro(coro, retries: int = 10, delay: float = 0.5) -> None:
    global bot_loop
    for _ in range(retries):
        if bot_loop is not None and bot_loop.is_running():
            asyncio.run_coroutine_threadsafe(coro, bot_loop)
            return
        time.sleep(delay)
    raise RuntimeError("Loop –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# ================== –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ==================
def check_login(username: str, password: str) -> bool:
    return username.strip() == PANEL_USER and password.strip() == PANEL_PASS

@app.route("/login", methods=["GET", "POST"])
@limiter.limit("10 per minute")
def login():
    form = LoginForm()
    if form.validate_on_submit():
        username = form.username.data.strip()
        password = form.password.data.strip()
        if check_login(username, password):
            session["pre_2fa"] = True
            session["username"] = username
            return redirect(url_for("twofa"))
        else:
            # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            try:
                if OWNER_ID and application:
                    schedule_coro(application.bot.send_message(
                        chat_id=int(OWNER_ID),
                        text=f"üö® –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞\n–õ–æ–≥–∏–Ω: {username}\nIP: {request.remote_addr}"
                    ))
            except Exception as e:
                app.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ owner: {e}")

            flash("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å", "danger")
    return render_template("login.html", form=form)

@app.route("/")
@login_required
def index():
    stats = load_stats()
    unique_users = stats.get("unique_users")
    if isinstance(unique_users, (list, dict)):
        uniq_count = len(unique_users)
    else:
        try:
            uniq_count = int(unique_users)
        except Exception:
            uniq_count = 0

    totals = {
        "unique_users_count": uniq_count,
        "total_messages": stats.get("total_messages", 0),
        "schedule_requests": stats.get("schedule_requests", 0),
        "commands_executed": stats.get("commands_executed", 0),
        "search_queries": stats.get("search_queries", 0),
        "errors": stats.get("errors", 0),
    }

    return render_template(
        "index.html",
        stats=stats,
        totals=totals,
        peak_usage=stats.get("peak_usage", {}),
        commands_per_user=stats.get("commands_per_user", {}),
        daily_active_users=stats.get("daily_active_users", {}),
    )

@app.route("/logout")
def logout():
    session.pop("logged_in", None)
    return redirect(url_for("login"))

# ================== USERS ==================
@app.route("/users", methods=["GET"])
@login_required
def users_page():
    users = load_users()

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if OWNER_ID:
        if str(OWNER_ID) not in users:
            users[str(OWNER_ID)] = {"role": "owner", "username": "Owner"}
            save_users(users)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ owner ‚Üí admin ‚Üí mod ‚Üí user
    role_order = {"owner": 0, "admin": 1, "mod": 2, "user": 3, "unknown": 9}
    sorted_users = sorted(
        users.items(),
        key=lambda x: (role_order.get(x[1]["role"], 9), x[0])
    )

    return render_template("users.html", users=sorted_users)


@app.route("/users/add", methods=["POST"])
@login_required
def users_add():
    uid = (request.form.get("user_id") or "").strip()
    role = (request.form.get("role") or "user").strip()

    if not uid.isdigit():
        flash("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º", "danger")
        return redirect(url_for("users_page"))

    if role == "owner":
        flash("‚ùå –ù–µ–ª—å–∑—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞!", "danger")
        role = "user"

    users = load_users()
    users[uid] = {"role": role, "username": ""}
    save_users(users)

    flash(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ä–æ–ª—å—é {role}", "success")
    return redirect(url_for("users_page"))



@app.route("/users/setrole", methods=["POST"])
@login_required
def users_setrole():
    uid = (request.form.get("user_id") or "").strip()
    role = (request.form.get("role") or "user").strip()

    if uid == str(OWNER_ID):
        flash("‚ùå –ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å —Ä–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–∞!", "danger")
        return redirect(url_for("users_page"))

    users = load_users()
    if uid in users:
        users[uid]["role"] = role
        save_users(users)
        flash(f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {role}", "info")
    else:
        flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", "danger")

    return redirect(url_for("users_page"))

@app.route("/users/delete/<user_id>", methods=["POST"])
@login_required
def users_delete(user_id: str):
    if str(user_id) == str(OWNER_ID):
        flash("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞!", "danger")
        return redirect(url_for("users_page"))

    users = load_users()
    if user_id in users:
        del users[user_id]
        save_users(users)
        flash(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω", "warning")
    else:
        flash("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", "danger")
    return redirect(url_for("users_page"))


# ================== LOGS ==================
@app.route("/logs")
@login_required
def logs_page():
    data = tail_log(LOG_FILE, 80000)
    if request.args.get("ajax"):
        return data
    return render_template("logs.html", logs=data)

# ================== CONTROL ==================
@app.route("/control", methods=["GET"])
@login_required
def control_page():
    return render_template("control.html")

@app.route("/control/reset2fa", methods=["POST"])
@login_required
def action_reset2fa():
    try:
        write_json(TWOFA_FILE, {"enabled": False})
        flash("üîë 2FA —Å–±—Ä–æ—à–µ–Ω–æ. –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—Ö–æ–¥–µ —Å–Ω–æ–≤–∞ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è QR-–∫–æ–¥.", "warning")
    except Exception as e:
        flash(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å 2FA: {e}", "danger")
    return redirect(url_for("control_page"))

# ====== –î–ï–ô–°–¢–í–ò–Ø (BOT) ======
@app.route("/control/reload", methods=["POST"])
@login_required
def action_reload():
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å.
    """
    try:
        from bot import fetch_schedule, schedule_cache  # type: ignore
        schedule_coro(_reload_coro(fetch_schedule, schedule_cache))
        flash("–ó–∞–ø—É—â–µ–Ω –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫—ç—à–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", "success")
    except Exception as e:
        flash(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∑–≤–∞—Ç—å reload —á–µ—Ä–µ–∑ –±–æ—Ç: {e}", "danger")
    return redirect(url_for("control_page"))

async def _reload_coro(fetch_schedule_func, schedule_cache_obj):
    try:
        schedule_cache_obj.clear()
    except Exception:
        pass
    await fetch_schedule_func(application)

@app.route("/control/fullreload", methods=["POST"])
@login_required
def action_fullreload():
    """
    –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ + –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏), –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å—Ç—å.
    """
    try:
        from bot import fetch_schedule, schedule_cache, fetch_teachers, teachers_cache  # type: ignore
        schedule_coro(_fullreload_coro(fetch_schedule, schedule_cache, fetch_teachers, teachers_cache))
        flash("–ó–∞–ø—É—â–µ–Ω–∞ –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", "success")
    except Exception as e:
        flash(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∑–≤–∞—Ç—å fullreload —á–µ—Ä–µ–∑ –±–æ—Ç: {e}", "danger")
    return redirect(url_for("control_page"))

async def _fullreload_coro(fetch_schedule_func, schedule_cache_obj, fetch_teachers_func, teachers_cache_obj):
    try:
        schedule_cache_obj.clear()
    except Exception:
        pass
    await fetch_schedule_func(application)
    try:
        teachers_cache_obj.clear()
    except Exception:
        pass
    try:
        await fetch_teachers_func(application)
    except Exception:
        # –µ—Å–ª–∏ –Ω–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî —Ç–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        pass

@app.route("/control/broadcast", methods=["POST"])
@login_required
def action_broadcast():
    """
    –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ allowed_users.json.
    """
    text = (request.form.get("message") or "").strip()
    if not text:
        flash("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ", "danger")
        return redirect(url_for("control_page"))

    users = load_users()
    if not users:
        flash("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", "warning")
        return redirect(url_for("control_page"))

    try:
        schedule_coro(_broadcast_coro(text, list(users.keys())))
        flash(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ ({len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)", "success")
    except Exception as e:
        flash(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É: {e}", "danger")
    return redirect(url_for("control_page"))

async def _broadcast_coro(text: str, user_ids: list[str]):
    ok, fail = 0, 0
    for uid in user_ids:
        try:
            await application.bot.send_message(chat_id=int(uid), text=f"üîî –û–±—ä—è–≤–ª–µ–Ω–∏–µ:\n{text}")
            ok += 1
        except Exception:
            fail += 1
    # –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –≤ –ª–æ–≥
    try:
        with open(LOG_FILE, "a", encoding="utf-8") as f:
            f.write(f"[{datetime.now().isoformat(timespec='seconds')}] broadcast: ok={ok}, fail={fail}\n")
    except Exception:
        pass


# ======== 2FA (Google Authenticator) ========
TWOFA_FILE = os.path.join(PROJECT_ROOT, "2fa_status.json")
TOTP_SECRET = os.environ.get("TOTP_SECRET") or pyotp.random_base32()
totp = pyotp.TOTP(TOTP_SECRET)


def is_2fa_enabled() -> bool:
    data = read_json(TWOFA_FILE, {"enabled": False})
    return data.get("enabled", False)


def set_2fa_enabled():
    write_json(TWOFA_FILE, {"enabled": True})


@app.route("/qrcode")
def qrcode_route():
    # –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à—ë–ª login, –Ω–æ –µ—â—ë –Ω–µ 2FA
    if not session.get("pre_2fa") and not session.get("logged_in"):
        return redirect(url_for("login"))

    # –µ—Å–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω 2FA ‚Äî –Ω–µ —Ä–∏—Å—É–µ–º QR
    if is_2fa_enabled():
        flash("2FA —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.", "info")
        return redirect(url_for("twofa"))

    uri = totp.provisioning_uri(name="AdminPanel", issuer_name="SIBSAU_BOT")
    img = qrcode.make(uri)
    buf = io.BytesIO()
    img.save(buf, format="PNG")
    buf.seek(0)
    return send_file(buf, mimetype="image/png")


@app.route("/2fa", methods=["GET", "POST"], endpoint="twofa")
def twofa():
    if not session.get("pre_2fa"):
        return redirect(url_for("login"))

    show_qr = not is_2fa_enabled()
    form = TwoFAForm()

    if form.validate_on_submit():
        code = form.code.data.strip()
        if totp.verify(code):
            session.pop("pre_2fa", None)
            session["logged_in"] = True
            set_2fa_enabled()   # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º, —á—Ç–æ QR –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
            flash("‚úÖ 2FA —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ", "success")
            return redirect(url_for("index"))
        else:
            flash("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ 2FA", "danger")

    return render_template("2fa.html", form=form, show_qr=show_qr)

# ================== –ó–ê–ü–£–°–ö ==================
def run_flask():
    if SSL_CERT and SSL_KEY and os.path.exists(SSL_CERT) and os.path.exists(SSL_KEY):
        app.run(
            host="0.0.0.0",
            port=19999,
            ssl_context=(SSL_CERT, SSL_KEY)
        )
    else:
        print("‚ö†Ô∏è SSL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–∞–Ω–µ–ª—å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ HTTP (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ)")
        app.run(host="0.0.0.0", port=19999)
